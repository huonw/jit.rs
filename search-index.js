var searchIndex = {};
searchIndex['jit'] = {"items":[[0,"","jit","This crate wraps LibJIT in an idiomatic style.\nFor example, here's a quick example which makes a multiply function using LibJIT:\n \n```rust\n#![feature(plugin)]\nextern crate jit;\n#[no_link] #[plugin] #[macro_use]\nextern crate jit_macros;\nuse jit::{Context, get, Type};\nfn main() {\n    // make a new context to make functions on\n    let mut ctx = Context::new();\n    jit_func!(ctx, func, mul(x: isize, y: isize) -> isize, {\n        let result = x * y;\n        func.insn_return(result);\n    }, |mul| {\n        assert_eq!(mul((4, 5)), 20);\n    });\n}\n```"],[3,"Builder","","A context that is in the build phase while generating IR"],[3,"Context","",""],[3,"Needed","","An ELF dependency iterator"],[3,"ReadElf","",""],[3,"ReadElfError","","An error from trying to open the ELF, including the filename"],[3,"WriteElf","",""],[3,"AnyFunction","",""],[3,"UncompiledFunction","","A function which has not been compiled yet, so it can have instructions added to it."],[3,"CompiledFunction","",""],[3,"CallFlags","",""],[3,"Label","","A label in the code that can be branched to in instructions"],[3,"TypeKind","",""],[3,"Type","","An object that represents a native system type.\nEach `Type` represents a basic system type, be it a primitive, a struct, a\nunion, a pointer, or a function signature. The library uses this information\nto lay out values in memory.\nTypes are not attached to a context so they are reference-counted by LibJIT,\nso internally they are represented as `Rc<TypeData>`."],[3,"Field","","A single field of a struct"],[12,"index","","The index of the field",0],[3,"Fields","","Iterates through all the fields of a struct"],[3,"Params","","Iterator through all the arguments a function takes"],[3,"TaggedType","",""],[3,"Value","","Values form the backbone of the storage system in `libjit`.\nEvery value in the system, be it a constant, a local variable, or a\ntemporary result, is represented by an object of type `Value`. The JIT then\nallocates registers or memory locations to the values as appropriate."],[4,"ReadElfErrorCode","","An error from trying to open the ELF"],[13,"CannotOpen","","The file couldn't be opened",1],[13,"NotElf","","The file isn't an ELF",1],[13,"WrongArch","","The ELF is for a different architecture",1],[13,"BadFormat","","The ELF is badly formatted",1],[13,"Memory","","The ELF is too big to be loaded",1],[4,"Abi","","A platform's application binary interface"],[13,"CDecl","","The C application binary interface",2],[13,"VarArg","","The C application binary interface with variable arguments",2],[13,"StdCall","","A Windows application binary interface*-+",2],[13,"FastCall","","A Windows application binary interface",2],[5,"get","","Get the Rust type given as a type descriptor"],[5,"init","","Initialise the library and prepare for operations"],[5,"uses_interpreter","","Check if the JIT is using a fallback interpreter"],[5,"supports_threads","","Check if the JIT supports theads"],[5,"supports_virtual_memory","","Check if the JIT supports virtual memory"],[0,"flags","","Call flags to a function"],[3,"CallFlags","jit::flags",""],[17,"NO_THROW","","/// When the function won't throw a value"],[17,"NO_RETURN","","/// When the function won't return a value"],[17,"TAIL","","/// When the function is tail-recursive"],[11,"hash","jit","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"empty","","Returns an empty set of flags.",3],[11,"all","","Returns the set containing all flags.",3],[11,"bits","","Returns the raw value of the flags currently stored.",3],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3],[11,"is_empty","","Returns `true` if no flags are currently stored.",3],[11,"is_all","","Returns `true` if all flags are currently set.",3],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3],[11,"insert","","Inserts the specified flags in-place.",3],[11,"remove","","Removes the specified flags in-place.",3],[11,"toggle","","Toggles the specified flags in-place.",3],[6,"Output","jit::flags",""],[11,"bitor","jit","Returns the union of the two sets of flags.",3],[6,"Output","jit::flags",""],[11,"bitxor","jit","Returns the left flags, but with all the right flags toggled.",3],[6,"Output","jit::flags",""],[11,"bitand","jit","Returns the intersection between the two sets of flags.",3],[6,"Output","jit::flags",""],[11,"sub","jit","Returns the set difference of the two sets of flags.",3],[6,"Output","jit::flags",""],[11,"not","jit","Returns the complement of this set of flags.",3],[0,"kind","","The integer representation of a type"],[3,"TypeKind","jit::kind",""],[17,"Void","",""],[17,"SByte","",""],[17,"UByte","",""],[17,"Short","",""],[17,"UShort","",""],[17,"Int","",""],[17,"UInt","",""],[17,"NInt","",""],[17,"NUInt","",""],[17,"Long","",""],[17,"ULong","",""],[17,"Float32","",""],[17,"Float64","",""],[17,"NFloat","",""],[17,"Struct","",""],[17,"Union","",""],[17,"Signature","",""],[17,"Pointer","",""],[17,"FirstTagged","",""],[17,"SysBool","",""],[17,"SysChar","",""],[11,"hash","jit","",4],[11,"cmp","","",4],[11,"partial_cmp","","",4],[11,"lt","","",4],[11,"le","","",4],[11,"gt","","",4],[11,"ge","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"empty","","Returns an empty set of flags.",4],[11,"all","","Returns the set containing all flags.",4],[11,"bits","","Returns the raw value of the flags currently stored.",4],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4],[11,"is_empty","","Returns `true` if no flags are currently stored.",4],[11,"is_all","","Returns `true` if all flags are currently set.",4],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4],[11,"insert","","Inserts the specified flags in-place.",4],[11,"remove","","Removes the specified flags in-place.",4],[11,"toggle","","Toggles the specified flags in-place.",4],[6,"Output","jit::kind",""],[11,"bitor","jit","Returns the union of the two sets of flags.",4],[6,"Output","jit::kind",""],[11,"bitxor","jit","Returns the left flags, but with all the right flags toggled.",4],[6,"Output","jit::kind",""],[11,"bitand","jit","Returns the intersection between the two sets of flags.",4],[6,"Output","jit::kind",""],[11,"sub","jit","Returns the set difference of the two sets of flags.",4],[6,"Output","jit::kind",""],[11,"not","jit","Returns the complement of this set of flags.",4],[0,"typecs","","Type constants"],[3,"VOID","jit::typecs",""],[3,"SBYTE","",""],[3,"UBYTE","",""],[3,"SHORT","",""],[3,"USHORT","",""],[3,"INT","",""],[3,"UINT","",""],[3,"NINT","",""],[3,"NUINT","",""],[3,"LONG","",""],[3,"ULONG","",""],[3,"FLOAT32","",""],[3,"FLOAT64","",""],[3,"NFLOAT","",""],[3,"VOID_PTR","",""],[3,"SYS_BOOL","",""],[3,"SYS_CHAR","",""],[3,"SYS_UCHAR","",""],[3,"SYS_SHORT","",""],[3,"SYS_USHORT","",""],[3,"SYS_INT","",""],[3,"SYS_UINT","",""],[3,"SYS_LONG","",""],[3,"SYS_ULONG","",""],[3,"SYS_LONGLONG","",""],[3,"SYS_ULONGLONG","",""],[3,"SYS_FLOAT","",""],[3,"SYS_DOUBLE","",""],[3,"SYS_LONG_DOUBLE","",""],[11,"eq","","",5],[11,"ne","","",5],[6,"Target","",""],[11,"deref","","",5],[11,"get","","",5],[11,"eq","","",6],[11,"ne","","",6],[6,"Target","",""],[11,"deref","","",6],[11,"get","","",6],[11,"eq","","",7],[11,"ne","","",7],[6,"Target","",""],[11,"deref","","",7],[11,"get","","",7],[11,"eq","","",8],[11,"ne","","",8],[6,"Target","",""],[11,"deref","","",8],[11,"get","","",8],[11,"eq","","",9],[11,"ne","","",9],[6,"Target","",""],[11,"deref","","",9],[11,"get","","",9],[11,"eq","","",10],[11,"ne","","",10],[6,"Target","",""],[11,"deref","","",10],[11,"get","","",10],[11,"eq","","",11],[11,"ne","","",11],[6,"Target","",""],[11,"deref","","",11],[11,"get","","",11],[11,"eq","","",12],[11,"ne","","",12],[6,"Target","",""],[11,"deref","","",12],[11,"get","","",12],[11,"eq","","",13],[11,"ne","","",13],[6,"Target","",""],[11,"deref","","",13],[11,"get","","",13],[11,"eq","","",14],[11,"ne","","",14],[6,"Target","",""],[11,"deref","","",14],[11,"get","","",14],[11,"eq","","",15],[11,"ne","","",15],[6,"Target","",""],[11,"deref","","",15],[11,"get","","",15],[11,"eq","","",16],[11,"ne","","",16],[6,"Target","",""],[11,"deref","","",16],[11,"get","","",16],[11,"eq","","",17],[11,"ne","","",17],[6,"Target","",""],[11,"deref","","",17],[11,"get","","",17],[11,"eq","","",18],[11,"ne","","",18],[6,"Target","",""],[11,"deref","","",18],[11,"get","","",18],[11,"eq","","",19],[11,"ne","","",19],[6,"Target","",""],[11,"deref","","",19],[11,"get","","",19],[11,"eq","","",20],[11,"ne","","",20],[6,"Target","",""],[11,"deref","","",20],[11,"get","","",20],[11,"eq","","",21],[11,"ne","","",21],[6,"Target","",""],[11,"deref","","",21],[11,"get","","",21],[11,"eq","","",22],[11,"ne","","",22],[6,"Target","",""],[11,"deref","","",22],[11,"get","","",22],[11,"eq","","",23],[11,"ne","","",23],[6,"Target","",""],[11,"deref","","",23],[11,"get","","",23],[11,"eq","","",24],[11,"ne","","",24],[6,"Target","",""],[11,"deref","","",24],[11,"get","","",24],[11,"eq","","",25],[11,"ne","","",25],[6,"Target","",""],[11,"deref","","",25],[11,"get","","",25],[11,"eq","","",26],[11,"ne","","",26],[6,"Target","",""],[11,"deref","","",26],[11,"get","","",26],[11,"eq","","",27],[11,"ne","","",27],[6,"Target","",""],[11,"deref","","",27],[11,"get","","",27],[11,"eq","","",28],[11,"ne","","",28],[6,"Target","",""],[11,"deref","","",28],[11,"get","","",28],[11,"eq","","",29],[11,"ne","","",29],[6,"Target","",""],[11,"deref","","",29],[11,"get","","",29],[11,"eq","","",30],[11,"ne","","",30],[6,"Target","",""],[11,"deref","","",30],[11,"get","","",30],[11,"eq","","",31],[11,"ne","","",31],[6,"Target","",""],[11,"deref","","",31],[11,"get","","",31],[11,"eq","","",32],[11,"ne","","",32],[6,"Target","",""],[11,"deref","","",32],[11,"get","","",32],[11,"eq","","",33],[11,"ne","","",33],[6,"Target","",""],[11,"deref","","",33],[11,"get","","",33],[11,"eq","jit","",34],[11,"ne","","",34],[11,"as_ptr","","Convert to a native pointer",34],[11,"from_ptr","","Convert from a native pointer",34],[11,"as_ptr","","",35],[11,"from_ptr","","",35],[11,"new","","Create a new JIT Context",34],[11,"get_meta","","Get the tagged metadata of an object",34],[11,"set_meta","","Tag the context with some metadata",34],[11,"build","","Lock the context so you can safely generate IR",34],[11,"build_func","","Lock the context so you can safely generate IR in a new function on the context which is\ncompiled for you",34],[11,"functions","","Iterate through the functions contained inside this context",34],[11,"drop","","",34],[11,"compile","std::ffi::c_str","",36],[11,"get_type","","",36],[11,"next","jit","",37],[11,"size_hint","","",37],[11,"eq","","",38],[11,"ne","","",38],[11,"as_ptr","","Convert to a native pointer",38],[11,"from_ptr","","Convert from a native pointer",38],[11,"fmt","","",1],[11,"description","","",1],[11,"fmt","","",39],[11,"new","","Open a new ELF binary",38],[11,"get_name","","Get the name of this ELF binary",38],[11,"add_to_context","","",38],[11,"get_symbol","","Get a symbol in the ELF binary",38],[11,"needed","","Iterate over the needed libraries",38],[11,"drop","","",38],[11,"eq","","",40],[11,"ne","","",40],[11,"as_ptr","","Convert to a native pointer",40],[11,"from_ptr","","Convert from a native pointer",40],[11,"new","","Create a new ELF binary reader",40],[11,"write","","Write to the filename given (not implemented by LibJIT yet, so there's no point to this yet\nbut I'm sure GNU will hear the people sing the songs of angry men soon enough)",40],[11,"add_function","","Add a function to the ELF",40],[11,"add_needed","","Add a dependency to the ELF",40],[11,"drop","","",40],[11,"hash","","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"empty","","Returns an empty set of flags.",3],[11,"all","","Returns the set containing all flags.",3],[11,"bits","","Returns the raw value of the flags currently stored.",3],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3],[11,"is_empty","","Returns `true` if no flags are currently stored.",3],[11,"is_all","","Returns `true` if all flags are currently set.",3],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3],[11,"insert","","Inserts the specified flags in-place.",3],[11,"remove","","Removes the specified flags in-place.",3],[11,"toggle","","Toggles the specified flags in-place.",3],[11,"bitor","","Returns the union of the two sets of flags.",3],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3],[11,"bitand","","Returns the intersection between the two sets of flags.",3],[11,"sub","","Returns the set difference of the two sets of flags.",3],[11,"not","","Returns the complement of this set of flags.",3],[11,"default","","",2],[11,"eq","","",41],[11,"ne","","",41],[11,"as_ptr","","Convert to a native pointer",41],[11,"from_ptr","","Convert from a native pointer",41],[11,"into_compiled","","Return the compiled function if there is one",41],[11,"into_uncompiled","","Return the uncompiled function if there is one",41],[11,"is_compiled","","Check if this function is compiled",41],[11,"eq","","",42],[11,"ne","","",42],[11,"as_ptr","","Convert to a native pointer",42],[11,"from_ptr","","Convert from a native pointer",42],[11,"is_compiled","","10/10 would compile again",42],[11,"fmt","","",42],[11,"with","","Run a closure with the compiled function as an argument",42],[11,"eq","","",43],[11,"ne","","",43],[11,"as_ptr","","Convert to a native pointer",43],[11,"from_ptr","","Convert from a native pointer",43],[11,"is_compiled","","",43],[11,"fmt","","",43],[11,"drop","","",43],[11,"index","","Get the value that corresponds to a specified function parameter.",43],[11,"new","","Create a new function block and associate it with a JIT context.\nIt is recommended that you call `Function::new` and `function.compile()`\nin the closure you give to `context.build(...)`.\n \nThis will protect the JIT's internal data structures within a\nmulti-threaded environment.",43],[11,"new_nested","","Create a new function block and associate it with a JIT context.\nIn addition, this function is nested inside the specified *parent*\nfunction and is able to access its parent's (and grandparent's) local\nvariables.\n \nThe front end is responsible for ensuring that the nested function can\nnever be called by anyone except its parent and sibling functions.\nThe front end is also responsible for ensuring that the nested function\nis compiled before its parent.",43],[11,"insn_convert","","Make an instruction that converts the value to the type given",43],[11,"insn_of","","Make an instructional representation of a Rust value",43],[11,"insn_uses_catcher","","Notify the function building process that this function has a catch block\nin it. This must be called before any code that is part of a try block",43],[11,"insn_throw","","Throw an exception from the function with the value given",43],[11,"insn_return","","Return from the function with the value given",43],[11,"insn_default_return","","Return from the function",43],[11,"insn_mul","","Make an instruction that multiplies the values",43],[11,"insn_mul_ovf","","Make an instruction that multiplies the values and throws upon overflow",43],[11,"insn_add","","Make an instruction that adds the values",43],[11,"insn_add_ovf","","Make an instruction that adds the values and throws upon overflow",43],[11,"insn_sub","","Make an instruction that subtracts the second value from the first",43],[11,"insn_sub_ovf","","Make an instruction that subtracts the second value from the first and throws upon overflow",43],[11,"insn_div","","Make an instruction that divides the first number by the second",43],[11,"insn_rem","","Make an instruction that finds the remainder when the first number is\ndivided by the second",43],[11,"insn_leq","","Make an instruction that checks if the first value is lower than or\nequal to the second",43],[11,"insn_geq","","Make an instruction that checks if the first value is greater than or\nequal to the second",43],[11,"insn_lt","","Make an instruction that checks if the first value is lower than the second",43],[11,"insn_gt","","Make an instruction that checks if the first value is greater than the second",43],[11,"insn_eq","","Make an instruction that checks if the values are equal",43],[11,"insn_neq","","Make an instruction that checks if the values are not equal",43],[11,"insn_and","","Make an instruction that performs a bitwise and on the two values",43],[11,"insn_or","","Make an instruction that performs a bitwise or on the two values",43],[11,"insn_xor","","Make an instruction that performs a bitwise xor on the two values",43],[11,"insn_not","","Make an instruction that performs a bitwise not on the two values",43],[11,"insn_shl","","Make an instruction that performs a left bitwise shift on the first\nvalue by the second value",43],[11,"insn_shr","","Make an instruction that performs a right bitwise shift on the first\nvalue by the second value",43],[11,"insn_ushr","","Make an instruction that performs a right bitwise shift on the first\nvalue by the second value",43],[11,"insn_neg","","Make an instruction that performs a bitwise negate on the value",43],[11,"insn_dup","","Make an instruction that duplicates the value given",43],[11,"insn_load","","Make an instruction that loads a value from a src value",43],[11,"insn_load_relative","","Make an instruction that loads a value from a src value",43],[11,"insn_store","","Make an instruction that stores a value at a destination value",43],[11,"insn_store_relative","","Make an instruction that stores a value a certain offset away from a\ndestination value",43],[11,"insn_label","","Make an instruction that sets a label",43],[11,"insn_branch","","Make an instruction that branches to a certain label",43],[11,"insn_branch_if","","Make an instruction that branches to a certain label if the value is true",43],[11,"insn_branch_if_not","","Make an instruction that branches to a certain label if the value is false",43],[11,"insn_jump_table","","Make an instruction that branches to a label in the table",43],[11,"insn_acos","","Make an instruction that gets the inverse cosine of the number given",43],[11,"insn_asin","","Make an instruction that gets the inverse sine of the number given",43],[11,"insn_atan","","Make an instruction that gets the inverse tangent of the number given",43],[11,"insn_atan2","","Make an instruction that gets the inverse tangent of the numbers given",43],[11,"insn_ceil","","Make an instruction that finds the nearest integer above a number",43],[11,"insn_cos","","Make an instruction that gets the consine of the number given",43],[11,"insn_cosh","","Make an instruction that gets the hyperbolic consine of the number given",43],[11,"insn_exp","","Make an instruction that gets the natural logarithm rased to the power\nof the number",43],[11,"insn_floor","","Make an instruction that finds the nearest integer below a number",43],[11,"insn_log","","Make an instruction that gets the natural logarithm of the number",43],[11,"insn_log10","","Make an instruction that gets the base 10 logarithm of the number",43],[11,"insn_pow","","Make an instruction the gets the result of raising the first value to\nthe power of the second value",43],[11,"insn_rint","","Make an instruction the gets the result of rounding the value to the\nnearest integer",43],[11,"insn_round","","Make an instruction the gets the result of rounding the value to the\nnearest integer",43],[11,"insn_sin","","Make an instruction the gets the sine of the number",43],[11,"insn_sinh","","Make an instruction the gets the hyperbolic sine of the number",43],[11,"insn_sqrt","","Make an instruction the gets the square root of a number",43],[11,"insn_tan","","Make an instruction the gets the tangent of a number",43],[11,"insn_tanh","","Make an instruction the gets the hyperbolic tangent of a number",43],[11,"insn_trunc","","Make an instruction that truncates the value",43],[11,"insn_is_nan","","Make an instruction that checks if the number is NaN",43],[11,"insn_is_finite","","Make an instruction that checks if the number is finite",43],[11,"insn_is_inf","","Make an instruction that checks if the number is  infinite",43],[11,"insn_abs","","Make an instruction that gets the absolute value of a number",43],[11,"insn_min","","Make an instruction that gets the smallest of two numbers",43],[11,"insn_max","","Make an instruction that gets the biggest of two numbers",43],[11,"insn_sign","","Make an instruction that gets the sign of a number",43],[11,"insn_call","","Call the function, which may or may not be translated yet",43],[11,"insn_call_indirect","","Make an instruction that calls a function that has the signature given\nwith some arguments through a pointer to the fucntion",43],[11,"insn_call_native0","","Make an instruction that calls a Rust function that has the signature\ngiven with no arguments and expects a return value",43],[11,"insn_call_native1","","Make an instruction that calls a Rust function that has the signature\ngiven with a single argument and expects a return value",43],[11,"insn_call_native2","","Make an instruction that calls a Rust function that has the signature\ngiven with two arguments and expects a return value",43],[11,"insn_call_native3","","Make an instruction that calls a Rust function that has the signature\ngiven with three arguments and expects a return value",43],[11,"insn_call_native4","","Make an instruction that calls a Rust function that has the signature\ngiven with four arguments and expects a return value",43],[11,"insn_memcpy","","Make an instruction that copies memory from a source address to a destination address",43],[11,"insn_memmove","","Make an instruction that moves memory from a source address to a destination address",43],[11,"insn_memset","","Make an instruction that sets memory at the destination address",43],[11,"insn_alloca","","Make an instruction that allocates some space",43],[11,"insn_address_of","","Make an instruction that gets the address of a value",43],[11,"insn_if","","Make instructions to run the block if the condition is met",43],[11,"insn_if_not","","Make instructions to run the block if the condition is not met",43],[11,"insn_loop","","Make instructions to run the block forever",43],[11,"insn_loop_while","","Make instructions to run the block and continue running it so long\nas the condition is met",43],[11,"insn_while","","Make instructions to run the block and continue running it so long\nas the condition is met",43],[11,"set_optimization_level","","Set the optimization level of the function, where the bigger the level,\nthe more effort should be spent optimising",43],[11,"get_max_optimization_level","","Get the max optimization level",43],[11,"set_recompilable","","Make this function a candidate for recompilation",43],[11,"get_entry","","Get the entry block of this function",43],[11,"get_current","","Get the current block of this function",43],[11,"compile","","Compile the function",43],[11,"compile_with","","Compile the function into a closure directly",43],[11,"eq","","",44],[11,"ne","","",44],[11,"fmt","","",44],[11,"new","","Create a new label",44],[11,"deref","","",44],[11,"deref_mut","","",44],[11,"hash","","",4],[11,"cmp","","",4],[11,"partial_cmp","","",4],[11,"lt","","",4],[11,"le","","",4],[11,"gt","","",4],[11,"ge","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"empty","","Returns an empty set of flags.",4],[11,"all","","Returns the set containing all flags.",4],[11,"bits","","Returns the raw value of the flags currently stored.",4],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4],[11,"is_empty","","Returns `true` if no flags are currently stored.",4],[11,"is_all","","Returns `true` if all flags are currently set.",4],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4],[11,"insert","","Inserts the specified flags in-place.",4],[11,"remove","","Removes the specified flags in-place.",4],[11,"toggle","","Toggles the specified flags in-place.",4],[11,"bitor","","Returns the union of the two sets of flags.",4],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4],[11,"bitand","","Returns the intersection between the two sets of flags.",4],[11,"sub","","Returns the set difference of the two sets of flags.",4],[11,"not","","Returns the complement of this set of flags.",4],[11,"eq","jit::typecs","",5],[11,"ne","","",5],[11,"deref","","",5],[11,"get","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"deref","","",6],[11,"get","","",6],[11,"eq","","",7],[11,"ne","","",7],[11,"deref","","",7],[11,"get","","",7],[11,"eq","","",8],[11,"ne","","",8],[11,"deref","","",8],[11,"get","","",8],[11,"eq","","",9],[11,"ne","","",9],[11,"deref","","",9],[11,"get","","",9],[11,"eq","","",10],[11,"ne","","",10],[11,"deref","","",10],[11,"get","","",10],[11,"eq","","",11],[11,"ne","","",11],[11,"deref","","",11],[11,"get","","",11],[11,"eq","","",12],[11,"ne","","",12],[11,"deref","","",12],[11,"get","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"deref","","",13],[11,"get","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"deref","","",14],[11,"get","","",14],[11,"eq","","",15],[11,"ne","","",15],[11,"deref","","",15],[11,"get","","",15],[11,"eq","","",16],[11,"ne","","",16],[11,"deref","","",16],[11,"get","","",16],[11,"eq","","",17],[11,"ne","","",17],[11,"deref","","",17],[11,"get","","",17],[11,"eq","","",18],[11,"ne","","",18],[11,"deref","","",18],[11,"get","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"deref","","",19],[11,"get","","",19],[11,"eq","","",20],[11,"ne","","",20],[11,"deref","","",20],[11,"get","","",20],[11,"eq","","",21],[11,"ne","","",21],[11,"deref","","",21],[11,"get","","",21],[11,"eq","","",22],[11,"ne","","",22],[11,"deref","","",22],[11,"get","","",22],[11,"eq","","",23],[11,"ne","","",23],[11,"deref","","",23],[11,"get","","",23],[11,"eq","","",24],[11,"ne","","",24],[11,"deref","","",24],[11,"get","","",24],[11,"eq","","",25],[11,"ne","","",25],[11,"deref","","",25],[11,"get","","",25],[11,"eq","","",26],[11,"ne","","",26],[11,"deref","","",26],[11,"get","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"deref","","",27],[11,"get","","",27],[11,"eq","","",28],[11,"ne","","",28],[11,"deref","","",28],[11,"get","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"deref","","",29],[11,"get","","",29],[11,"eq","","",30],[11,"ne","","",30],[11,"deref","","",30],[11,"get","","",30],[11,"eq","","",31],[11,"ne","","",31],[11,"deref","","",31],[11,"get","","",31],[11,"eq","","",32],[11,"ne","","",32],[11,"deref","","",32],[11,"get","","",32],[11,"eq","","",33],[11,"ne","","",33],[11,"deref","","",33],[11,"get","","",33],[11,"fmt","jit","",45],[11,"eq","","",0],[11,"ne","","",0],[11,"get_name","","Get the field's name or none if it lacks one",0],[11,"get_type","","Get the type of the field",0],[11,"get_offset","","Get the offset of the field",0],[11,"next","","",46],[11,"size_hint","","",46],[11,"next","","",47],[11,"size_hint","","",47],[11,"eq","","",45],[11,"ne","","",45],[11,"as_ptr","","",45],[11,"from_ptr","","",45],[11,"clone","","Make a copy of the type descriptor by increasing its reference count.",45],[11,"drop","","Free a type descriptor by decreasing its reference count.\nThis function is safe to use on pre-defined types, which are never\nactually freed.",45],[11,"new_signature","","Create a type descriptor for a function signature.",45],[11,"new_struct","","Create a type descriptor for a structure.",45],[11,"new_union","","Create a type descriptor for a union.",45],[11,"new_pointer","","Create a type descriptor for a pointer to another type.",45],[11,"get_size","","Get the size of this type in bytes.",45],[11,"get_alignment","","Get the alignment of this type in bytes.",45],[11,"get_kind","","Get a value that indicates the kind of this type. This allows callers to\nquickly classify a type to determine how it should be handled further.",45],[11,"get_ref","","Get the type that is referred to by this pointer type.",45],[11,"get_return","","Get the type returned by this function type.",45],[11,"with_names","","Set the field or parameter names of this type.",45],[11,"fields","","Iterator over the type's fields",45],[11,"params","","Iterator over the function signature's parameters",45],[11,"get_field","","Find the field/parameter index for a particular name.",45],[11,"is_primitive","","Check if this is a pointer",45],[11,"is_struct","","Check if this is a struct",45],[11,"is_union","","Check if this is a union",45],[11,"is_signature","","Check if this is a signature",45],[11,"is_pointer","","Check if this is a pointer",45],[11,"is_tagged","","Check if this is tagged",45],[11,"eq","","",48],[11,"ne","","",48],[11,"as_ptr","","",48],[11,"from_ptr","","",48],[11,"new","","Create a new tagged type",48],[11,"get_tagged_data","","Get the data this is tagged to",48],[11,"get_tagged_type","","Get the type this is tagged to",48],[11,"set_tagged_data","","Change the data this is tagged to",48],[11,"drop","","Free a type descriptor by decreasing its reference count.\nThis function is safe to use on pre-defined types, which are never\nactually freed.",48],[11,"deref","","",48],[11,"as_ptr","core::option","",49],[11,"from_ptr","","",49],[11,"eq","jit","",50],[11,"ne","","",50],[11,"as_ptr","","Convert to a native pointer",50],[11,"from_ptr","","Convert from a native pointer",50],[11,"fmt","","",50],[11,"clone","","",50],[11,"new","","Create a new value in the context of a function's current block.\nThe value initially starts off as a block-specific temporary. It will be\nconverted into a function-wide local variable if it is ever referenced\nfrom a different block.",50],[11,"get_type","","Get the type of the value",50],[11,"get_function","","Get the function which made this value",50],[11,"is_temp","","Determine if a value is temporary.  i.e. its scope extends over a single\nblock within its function.",50],[11,"is_addressable","","Determine if a value is addressable.",50],[11,"set_addressable","","Set a flag on a value to indicate that it is addressable.\nThis should be used when you want to take the address of a value (e.g. \n`&variable` in Rust/C).  The value is guaranteed to not be stored in a\nregister across a function call.",50],[11,"add","","",50],[11,"bitand","","",50],[11,"bitor","","",50],[11,"bitxor","","",50],[11,"div","","",50],[11,"mul","","",50],[11,"rem","","",50],[11,"shl","","",50],[11,"shr","","",50],[11,"sub","","",50],[11,"neg","","",50],[11,"not","","",50],[8,"Compile","","A type that can be compiled into a LibJIT representation"],[10,"compile","","Get a JIT representation of this value",51],[10,"get_type","","Get the type descriptor that represents this type",51],[8,"Function","","A function that can be compiled or not"],[10,"is_compiled","","Check if this function is compiled",52],[11,"get_signature","","Get the signature of this function",52],[8,"StaticType","","A static type that is owned by LibJIT itself"],[10,"get","","Get type contained in this static type",53],[8,"NativeRef","","A structure that wraps a native object"],[10,"as_ptr","","Returns the native reference encapsulated by this object",54],[10,"from_ptr","","Returns a wrapped version of the native reference given, even if the reference is null",54],[6,"Item","",""],[11,"next","","",37],[11,"size_hint","","",37],[11,"eq","","",38],[11,"ne","","",38],[11,"as_ptr","","Convert to a native pointer",38],[11,"from_ptr","","Convert from a native pointer",38],[11,"fmt","","",1],[11,"description","","",1],[11,"fmt","","",39],[11,"new","","Open a new ELF binary",38],[11,"get_name","","Get the name of this ELF binary",38],[11,"add_to_context","","",38],[11,"get_symbol","","Get a symbol in the ELF binary",38],[11,"needed","","Iterate over the needed libraries",38],[11,"drop","","",38],[11,"eq","","",40],[11,"ne","","",40],[11,"as_ptr","","Convert to a native pointer",40],[11,"from_ptr","","Convert from a native pointer",40],[11,"new","","Create a new ELF binary reader",40],[11,"write","","Write to the filename given (not implemented by LibJIT yet, so there's no point to this yet\nbut I'm sure GNU will hear the people sing the songs of angry men soon enough)",40],[11,"add_function","","Add a function to the ELF",40],[11,"add_needed","","Add a dependency to the ELF",40],[11,"drop","","",40],[11,"get_signature","","Get the signature of this function",52]],"paths":[[3,"Field"],[4,"ReadElfErrorCode"],[4,"Abi"],[3,"CallFlags"],[3,"TypeKind"],[3,"VOID"],[3,"SBYTE"],[3,"UBYTE"],[3,"SHORT"],[3,"USHORT"],[3,"INT"],[3,"UINT"],[3,"NINT"],[3,"NUINT"],[3,"LONG"],[3,"ULONG"],[3,"FLOAT32"],[3,"FLOAT64"],[3,"NFLOAT"],[3,"VOID_PTR"],[3,"SYS_BOOL"],[3,"SYS_CHAR"],[3,"SYS_UCHAR"],[3,"SYS_SHORT"],[3,"SYS_USHORT"],[3,"SYS_INT"],[3,"SYS_UINT"],[3,"SYS_LONG"],[3,"SYS_ULONG"],[3,"SYS_LONGLONG"],[3,"SYS_ULONGLONG"],[3,"SYS_FLOAT"],[3,"SYS_DOUBLE"],[3,"SYS_LONG_DOUBLE"],[3,"Context"],[3,"Builder"],[3,"CString"],[3,"Needed"],[3,"ReadElf"],[3,"ReadElfError"],[3,"WriteElf"],[3,"AnyFunction"],[3,"CompiledFunction"],[3,"UncompiledFunction"],[3,"Label"],[3,"Type"],[3,"Fields"],[3,"Params"],[3,"TaggedType"],[4,"Option"],[3,"Value"],[8,"Compile"],[8,"Function"],[8,"StaticType"],[8,"NativeRef"]]};
searchIndex['libjit-sys'] = {"items":[[0,"","libjit-sys",""],[3,"Struct_jit_memory_manager","",""],[12,"create","","",0],[12,"destroy","","",0],[12,"find_function_info","","",0],[12,"get_function","","",0],[12,"get_function_start","","",0],[12,"get_function_end","","",0],[12,"alloc_function","","",0],[12,"free_function","","",0],[12,"start_function","","",0],[12,"end_function","","",0],[12,"extend_limit","","",0],[12,"get_limit","","",0],[12,"get_break","","",0],[12,"set_break","","",0],[12,"alloc_trampoline","","",0],[12,"free_trampoline","","",0],[12,"alloc_closure","","",0],[12,"free_closure","","",0],[12,"alloc_data","","",0],[3,"Struct_jit_debugger_event","",""],[12,"_type","","",1],[12,"thread","","",1],[12,"function","","",1],[12,"data1","","",1],[12,"data2","","",1],[12,"id","","",1],[12,"trace","","",1],[3,"Struct_jit_debugger_breakpoint_info","",""],[12,"flags","","",2],[12,"thread","","",2],[12,"function","","",2],[12,"data1","","",2],[12,"data2","","",2],[3,"jit_intrinsic_descr_t","",""],[12,"return_type","","",3],[12,"ptr_result_type","","",3],[12,"arg1_type","","",3],[12,"arg2_type","","",3],[3,"jit_insn_iter_t","",""],[12,"block","","",4],[12,"posn","","",4],[3,"Struct_jit_opcode_info","",""],[12,"name","","",5],[12,"flags","","",5],[3,"Struct__jit_arch_frame","",""],[12,"next_frame","","",6],[12,"return_address","","",6],[3,"jit_unwind_context_t","",""],[12,"frame","","",7],[12,"cache","","",7],[12,"context","","",7],[3,"Union_Unnamed1","",""],[12,"data","","",8],[3,"jit_constant_t","",""],[12,"_type","","",9],[12,"un","","",9],[3,"jit_crawl_mark_t","",""],[12,"mark","","",10],[7,"jit_type_void","",""],[7,"jit_type_sbyte","",""],[7,"jit_type_ubyte","",""],[7,"jit_type_short","",""],[7,"jit_type_ushort","",""],[7,"jit_type_int","",""],[7,"jit_type_uint","",""],[7,"jit_type_nint","",""],[7,"jit_type_nuint","",""],[7,"jit_type_long","",""],[7,"jit_type_ulong","",""],[7,"jit_type_float32","",""],[7,"jit_type_float64","",""],[7,"jit_type_nfloat","",""],[7,"jit_type_void_ptr","",""],[7,"jit_type_sys_bool","",""],[7,"jit_type_sys_char","",""],[7,"jit_type_sys_schar","",""],[7,"jit_type_sys_uchar","",""],[7,"jit_type_sys_short","",""],[7,"jit_type_sys_ushort","",""],[7,"jit_type_sys_int","",""],[7,"jit_type_sys_uint","",""],[7,"jit_type_sys_long","",""],[7,"jit_type_sys_ulong","",""],[7,"jit_type_sys_longlong","",""],[7,"jit_type_sys_ulonglong","",""],[7,"jit_type_sys_float","",""],[7,"jit_type_sys_double","",""],[7,"jit_type_sys_long_double","",""],[7,"jit_opcodes","",""],[5,"jit_default_memory_manager","",""],[5,"jit_context_create","",""],[5,"jit_context_destroy","",""],[5,"jit_context_build_start","",""],[5,"jit_context_build_end","",""],[5,"jit_context_set_on_demand_driver","",""],[5,"jit_context_set_memory_manager","",""],[5,"jit_context_set_meta","",""],[5,"jit_context_set_meta_numeric","",""],[5,"jit_context_get_meta","",""],[5,"jit_context_get_meta_numeric","",""],[5,"jit_context_free_meta","",""],[5,"jit_type_copy","",""],[5,"jit_type_free","",""],[5,"jit_type_create_struct","",""],[5,"jit_type_create_union","",""],[5,"jit_type_create_signature","",""],[5,"jit_type_create_pointer","",""],[5,"jit_type_create_tagged","",""],[5,"jit_type_set_names","",""],[5,"jit_type_set_size_and_alignment","",""],[5,"jit_type_set_offset","",""],[5,"jit_type_get_kind","",""],[5,"jit_type_get_size","",""],[5,"jit_type_get_alignment","",""],[5,"jit_type_num_fields","",""],[5,"jit_type_get_field","",""],[5,"jit_type_get_offset","",""],[5,"jit_type_get_name","",""],[5,"jit_type_find_name","",""],[5,"jit_type_num_params","",""],[5,"jit_type_get_return","",""],[5,"jit_type_get_param","",""],[5,"jit_type_get_abi","",""],[5,"jit_type_get_ref","",""],[5,"jit_type_get_tagged_type","",""],[5,"jit_type_set_tagged_type","",""],[5,"jit_type_get_tagged_kind","",""],[5,"jit_type_get_tagged_data","",""],[5,"jit_type_set_tagged_data","",""],[5,"jit_type_is_primitive","",""],[5,"jit_type_is_struct","",""],[5,"jit_type_is_union","",""],[5,"jit_type_is_signature","",""],[5,"jit_type_is_pointer","",""],[5,"jit_type_is_tagged","",""],[5,"jit_type_best_alignment","",""],[5,"jit_type_normalize","",""],[5,"jit_type_remove_tags","",""],[5,"jit_type_promote_int","",""],[5,"jit_type_return_via_pointer","",""],[5,"jit_type_has_tag","",""],[5,"jit_apply","",""],[5,"jit_apply_raw","",""],[5,"jit_raw_supported","",""],[5,"jit_closure_create","",""],[5,"jit_closure_va_get_nint","",""],[5,"jit_closure_va_get_nuint","",""],[5,"jit_closure_va_get_long","",""],[5,"jit_closure_va_get_ulong","",""],[5,"jit_closure_va_get_float32","",""],[5,"jit_closure_va_get_float64","",""],[5,"jit_closure_va_get_nfloat","",""],[5,"jit_closure_va_get_ptr","",""],[5,"jit_closure_va_get_struct","",""],[5,"jit_block_get_function","",""],[5,"jit_block_get_context","",""],[5,"jit_block_get_label","",""],[5,"jit_block_get_next_label","",""],[5,"jit_block_next","",""],[5,"jit_block_previous","",""],[5,"jit_block_from_label","",""],[5,"jit_block_set_meta","",""],[5,"jit_block_get_meta","",""],[5,"jit_block_free_meta","",""],[5,"jit_block_is_reachable","",""],[5,"jit_block_ends_in_dead","",""],[5,"jit_block_current_is_dead","",""],[5,"jit_debugging_possible","",""],[5,"jit_debugger_create","",""],[5,"jit_debugger_destroy","",""],[5,"jit_debugger_get_context","",""],[5,"jit_debugger_from_context","",""],[5,"jit_debugger_get_self","",""],[5,"jit_debugger_get_thread","",""],[5,"jit_debugger_get_native_thread","",""],[5,"jit_debugger_set_breakable","",""],[5,"jit_debugger_attach_self","",""],[5,"jit_debugger_detach_self","",""],[5,"jit_debugger_wait_event","",""],[5,"jit_debugger_add_breakpoint","",""],[5,"jit_debugger_remove_breakpoint","",""],[5,"jit_debugger_remove_all_breakpoints","",""],[5,"jit_debugger_is_alive","",""],[5,"jit_debugger_is_running","",""],[5,"jit_debugger_run","",""],[5,"jit_debugger_step","",""],[5,"jit_debugger_next","",""],[5,"jit_debugger_finish","",""],[5,"jit_debugger_break","",""],[5,"jit_debugger_quit","",""],[5,"jit_debugger_set_hook","",""],[5,"jit_readelf_open","",""],[5,"jit_readelf_close","",""],[5,"jit_readelf_get_name","",""],[5,"jit_readelf_get_symbol","",""],[5,"jit_readelf_get_section","",""],[5,"jit_readelf_get_section_by_type","",""],[5,"jit_readelf_map_vaddr","",""],[5,"jit_readelf_num_needed","",""],[5,"jit_readelf_get_needed","",""],[5,"jit_readelf_add_to_context","",""],[5,"jit_readelf_resolve_all","",""],[5,"jit_readelf_register_symbol","",""],[5,"jit_writeelf_create","",""],[5,"jit_writeelf_destroy","",""],[5,"jit_writeelf_write","",""],[5,"jit_writeelf_add_function","",""],[5,"jit_writeelf_add_needed","",""],[5,"jit_writeelf_write_section","",""],[5,"jit_exception_get_last","",""],[5,"jit_exception_get_last_and_clear","",""],[5,"jit_exception_set_last","",""],[5,"jit_exception_clear_last","",""],[5,"jit_exception_throw","",""],[5,"jit_exception_builtin","",""],[5,"jit_exception_set_handler","",""],[5,"jit_exception_get_handler","",""],[5,"jit_exception_get_stack_trace","",""],[5,"jit_stack_trace_get_size","",""],[5,"jit_stack_trace_get_function","",""],[5,"jit_stack_trace_get_pc","",""],[5,"jit_stack_trace_get_offset","",""],[5,"jit_stack_trace_free","",""],[5,"jit_function_create","",""],[5,"jit_function_create_nested","",""],[5,"jit_function_abandon","",""],[5,"jit_function_get_context","",""],[5,"jit_function_get_signature","",""],[5,"jit_function_set_meta","",""],[5,"jit_function_get_meta","",""],[5,"jit_function_free_meta","",""],[5,"jit_function_next","",""],[5,"jit_function_previous","",""],[5,"jit_function_get_entry","",""],[5,"jit_function_get_current","",""],[5,"jit_function_get_nested_parent","",""],[5,"jit_function_compile","",""],[5,"jit_function_is_compiled","",""],[5,"jit_function_set_recompilable","",""],[5,"jit_function_clear_recompilable","",""],[5,"jit_function_is_recompilable","",""],[5,"jit_function_compile_entry","",""],[5,"jit_function_setup_entry","",""],[5,"jit_function_to_closure","",""],[5,"jit_function_from_closure","",""],[5,"jit_function_from_pc","",""],[5,"jit_function_to_vtable_pointer","",""],[5,"jit_function_from_vtable_pointer","",""],[5,"jit_function_set_on_demand_compiler","",""],[5,"jit_function_get_on_demand_compiler","",""],[5,"jit_function_apply","",""],[5,"jit_function_apply_vararg","",""],[5,"jit_function_set_optimization_level","",""],[5,"jit_function_get_optimization_level","",""],[5,"jit_function_get_max_optimization_level","",""],[5,"jit_function_reserve_label","",""],[5,"jit_function_labels_equal","",""],[5,"jit_init","",""],[5,"jit_uses_interpreter","",""],[5,"jit_supports_threads","",""],[5,"jit_supports_virtual_memory","",""],[5,"jit_supports_closures","",""],[5,"jit_get_closure_size","",""],[5,"jit_get_closure_alignment","",""],[5,"jit_get_trampoline_size","",""],[5,"jit_get_trampoline_alignment","",""],[5,"jit_insn_get_opcode","",""],[5,"jit_insn_get_dest","",""],[5,"jit_insn_get_value1","",""],[5,"jit_insn_get_value2","",""],[5,"jit_insn_get_label","",""],[5,"jit_insn_get_function","",""],[5,"jit_insn_get_native","",""],[5,"jit_insn_get_name","",""],[5,"jit_insn_get_signature","",""],[5,"jit_insn_dest_is_value","",""],[5,"jit_insn_label","",""],[5,"jit_insn_new_block","",""],[5,"jit_insn_load","",""],[5,"jit_insn_dup","",""],[5,"jit_insn_load_small","",""],[5,"jit_insn_store","",""],[5,"jit_insn_load_relative","",""],[5,"jit_insn_store_relative","",""],[5,"jit_insn_add_relative","",""],[5,"jit_insn_load_elem","",""],[5,"jit_insn_load_elem_address","",""],[5,"jit_insn_store_elem","",""],[5,"jit_insn_check_null","",""],[5,"jit_insn_add","",""],[5,"jit_insn_add_ovf","",""],[5,"jit_insn_sub","",""],[5,"jit_insn_sub_ovf","",""],[5,"jit_insn_mul","",""],[5,"jit_insn_mul_ovf","",""],[5,"jit_insn_div","",""],[5,"jit_insn_rem","",""],[5,"jit_insn_rem_ieee","",""],[5,"jit_insn_neg","",""],[5,"jit_insn_and","",""],[5,"jit_insn_or","",""],[5,"jit_insn_xor","",""],[5,"jit_insn_not","",""],[5,"jit_insn_shl","",""],[5,"jit_insn_shr","",""],[5,"jit_insn_ushr","",""],[5,"jit_insn_sshr","",""],[5,"jit_insn_eq","",""],[5,"jit_insn_ne","",""],[5,"jit_insn_lt","",""],[5,"jit_insn_le","",""],[5,"jit_insn_gt","",""],[5,"jit_insn_ge","",""],[5,"jit_insn_cmpl","",""],[5,"jit_insn_cmpg","",""],[5,"jit_insn_to_bool","",""],[5,"jit_insn_to_not_bool","",""],[5,"jit_insn_acos","",""],[5,"jit_insn_asin","",""],[5,"jit_insn_atan","",""],[5,"jit_insn_atan2","",""],[5,"jit_insn_ceil","",""],[5,"jit_insn_cos","",""],[5,"jit_insn_cosh","",""],[5,"jit_insn_exp","",""],[5,"jit_insn_floor","",""],[5,"jit_insn_log","",""],[5,"jit_insn_log10","",""],[5,"jit_insn_pow","",""],[5,"jit_insn_rint","",""],[5,"jit_insn_round","",""],[5,"jit_insn_sin","",""],[5,"jit_insn_sinh","",""],[5,"jit_insn_sqrt","",""],[5,"jit_insn_tan","",""],[5,"jit_insn_tanh","",""],[5,"jit_insn_trunc","",""],[5,"jit_insn_is_nan","",""],[5,"jit_insn_is_finite","",""],[5,"jit_insn_is_inf","",""],[5,"jit_insn_abs","",""],[5,"jit_insn_min","",""],[5,"jit_insn_max","",""],[5,"jit_insn_sign","",""],[5,"jit_insn_branch","",""],[5,"jit_insn_branch_if","",""],[5,"jit_insn_branch_if_not","",""],[5,"jit_insn_jump_table","",""],[5,"jit_insn_address_of","",""],[5,"jit_insn_address_of_label","",""],[5,"jit_insn_convert","",""],[5,"jit_insn_call","",""],[5,"jit_insn_call_indirect","",""],[5,"jit_insn_call_indirect_vtable","",""],[5,"jit_insn_call_native","",""],[5,"jit_insn_call_intrinsic","",""],[5,"jit_insn_incoming_reg","",""],[5,"jit_insn_incoming_frame_posn","",""],[5,"jit_insn_outgoing_reg","",""],[5,"jit_insn_outgoing_frame_posn","",""],[5,"jit_insn_return_reg","",""],[5,"jit_insn_setup_for_nested","",""],[5,"jit_insn_flush_struct","",""],[5,"jit_insn_import","",""],[5,"jit_insn_push","",""],[5,"jit_insn_push_ptr","",""],[5,"jit_insn_set_param","",""],[5,"jit_insn_set_param_ptr","",""],[5,"jit_insn_push_return_area_ptr","",""],[5,"jit_insn_pop_stack","",""],[5,"jit_insn_defer_pop_stack","",""],[5,"jit_insn_flush_defer_pop","",""],[5,"jit_insn_return","",""],[5,"jit_insn_return_ptr","",""],[5,"jit_insn_default_return","",""],[5,"jit_insn_throw","",""],[5,"jit_insn_get_call_stack","",""],[5,"jit_insn_thrown_exception","",""],[5,"jit_insn_uses_catcher","",""],[5,"jit_insn_start_catcher","",""],[5,"jit_insn_branch_if_pc_not_in_range","",""],[5,"jit_insn_rethrow_unhandled","",""],[5,"jit_insn_start_finally","",""],[5,"jit_insn_return_from_finally","",""],[5,"jit_insn_call_finally","",""],[5,"jit_insn_start_filter","",""],[5,"jit_insn_return_from_filter","",""],[5,"jit_insn_call_filter","",""],[5,"jit_insn_memcpy","",""],[5,"jit_insn_memmove","",""],[5,"jit_insn_memset","",""],[5,"jit_insn_alloca","",""],[5,"jit_insn_move_blocks_to_end","",""],[5,"jit_insn_move_blocks_to_start","",""],[5,"jit_insn_mark_offset","",""],[5,"jit_insn_mark_breakpoint","",""],[5,"jit_insn_mark_breakpoint_variable","",""],[5,"jit_insn_iter_init","",""],[5,"jit_insn_iter_init_last","",""],[5,"jit_insn_iter_next","",""],[5,"jit_insn_iter_previous","",""],[5,"jit_int_add","",""],[5,"jit_int_sub","",""],[5,"jit_int_mul","",""],[5,"jit_int_div","",""],[5,"jit_int_rem","",""],[5,"jit_int_add_ovf","",""],[5,"jit_int_sub_ovf","",""],[5,"jit_int_mul_ovf","",""],[5,"jit_int_neg","",""],[5,"jit_int_and","",""],[5,"jit_int_or","",""],[5,"jit_int_xor","",""],[5,"jit_int_not","",""],[5,"jit_int_shl","",""],[5,"jit_int_shr","",""],[5,"jit_int_eq","",""],[5,"jit_int_ne","",""],[5,"jit_int_lt","",""],[5,"jit_int_le","",""],[5,"jit_int_gt","",""],[5,"jit_int_ge","",""],[5,"jit_int_cmp","",""],[5,"jit_int_abs","",""],[5,"jit_int_min","",""],[5,"jit_int_max","",""],[5,"jit_int_sign","",""],[5,"jit_uint_add","",""],[5,"jit_uint_sub","",""],[5,"jit_uint_mul","",""],[5,"jit_uint_div","",""],[5,"jit_uint_rem","",""],[5,"jit_uint_add_ovf","",""],[5,"jit_uint_sub_ovf","",""],[5,"jit_uint_mul_ovf","",""],[5,"jit_uint_neg","",""],[5,"jit_uint_and","",""],[5,"jit_uint_or","",""],[5,"jit_uint_xor","",""],[5,"jit_uint_not","",""],[5,"jit_uint_shl","",""],[5,"jit_uint_shr","",""],[5,"jit_uint_eq","",""],[5,"jit_uint_ne","",""],[5,"jit_uint_lt","",""],[5,"jit_uint_le","",""],[5,"jit_uint_gt","",""],[5,"jit_uint_ge","",""],[5,"jit_uint_cmp","",""],[5,"jit_uint_min","",""],[5,"jit_uint_max","",""],[5,"jit_long_add","",""],[5,"jit_long_sub","",""],[5,"jit_long_mul","",""],[5,"jit_long_div","",""],[5,"jit_long_rem","",""],[5,"jit_long_add_ovf","",""],[5,"jit_long_sub_ovf","",""],[5,"jit_long_mul_ovf","",""],[5,"jit_long_neg","",""],[5,"jit_long_and","",""],[5,"jit_long_or","",""],[5,"jit_long_xor","",""],[5,"jit_long_not","",""],[5,"jit_long_shl","",""],[5,"jit_long_shr","",""],[5,"jit_long_eq","",""],[5,"jit_long_ne","",""],[5,"jit_long_lt","",""],[5,"jit_long_le","",""],[5,"jit_long_gt","",""],[5,"jit_long_ge","",""],[5,"jit_long_cmp","",""],[5,"jit_long_abs","",""],[5,"jit_long_min","",""],[5,"jit_long_max","",""],[5,"jit_long_sign","",""],[5,"jit_ulong_add","",""],[5,"jit_ulong_sub","",""],[5,"jit_ulong_mul","",""],[5,"jit_ulong_div","",""],[5,"jit_ulong_rem","",""],[5,"jit_ulong_add_ovf","",""],[5,"jit_ulong_sub_ovf","",""],[5,"jit_ulong_mul_ovf","",""],[5,"jit_ulong_neg","",""],[5,"jit_ulong_and","",""],[5,"jit_ulong_or","",""],[5,"jit_ulong_xor","",""],[5,"jit_ulong_not","",""],[5,"jit_ulong_shl","",""],[5,"jit_ulong_shr","",""],[5,"jit_ulong_eq","",""],[5,"jit_ulong_ne","",""],[5,"jit_ulong_lt","",""],[5,"jit_ulong_le","",""],[5,"jit_ulong_gt","",""],[5,"jit_ulong_ge","",""],[5,"jit_ulong_cmp","",""],[5,"jit_ulong_min","",""],[5,"jit_ulong_max","",""],[5,"jit_float32_add","",""],[5,"jit_float32_sub","",""],[5,"jit_float32_mul","",""],[5,"jit_float32_div","",""],[5,"jit_float32_rem","",""],[5,"jit_float32_ieee_rem","",""],[5,"jit_float32_neg","",""],[5,"jit_float32_eq","",""],[5,"jit_float32_ne","",""],[5,"jit_float32_lt","",""],[5,"jit_float32_le","",""],[5,"jit_float32_gt","",""],[5,"jit_float32_ge","",""],[5,"jit_float32_cmpl","",""],[5,"jit_float32_cmpg","",""],[5,"jit_float32_acos","",""],[5,"jit_float32_asin","",""],[5,"jit_float32_atan","",""],[5,"jit_float32_atan2","",""],[5,"jit_float32_ceil","",""],[5,"jit_float32_cos","",""],[5,"jit_float32_cosh","",""],[5,"jit_float32_exp","",""],[5,"jit_float32_floor","",""],[5,"jit_float32_log","",""],[5,"jit_float32_log10","",""],[5,"jit_float32_pow","",""],[5,"jit_float32_rint","",""],[5,"jit_float32_round","",""],[5,"jit_float32_sin","",""],[5,"jit_float32_sinh","",""],[5,"jit_float32_sqrt","",""],[5,"jit_float32_tan","",""],[5,"jit_float32_tanh","",""],[5,"jit_float32_trunc","",""],[5,"jit_float32_is_finite","",""],[5,"jit_float32_is_nan","",""],[5,"jit_float32_is_inf","",""],[5,"jit_float32_abs","",""],[5,"jit_float32_min","",""],[5,"jit_float32_max","",""],[5,"jit_float32_sign","",""],[5,"jit_float64_add","",""],[5,"jit_float64_sub","",""],[5,"jit_float64_mul","",""],[5,"jit_float64_div","",""],[5,"jit_float64_rem","",""],[5,"jit_float64_ieee_rem","",""],[5,"jit_float64_neg","",""],[5,"jit_float64_eq","",""],[5,"jit_float64_ne","",""],[5,"jit_float64_lt","",""],[5,"jit_float64_le","",""],[5,"jit_float64_gt","",""],[5,"jit_float64_ge","",""],[5,"jit_float64_cmpl","",""],[5,"jit_float64_cmpg","",""],[5,"jit_float64_acos","",""],[5,"jit_float64_asin","",""],[5,"jit_float64_atan","",""],[5,"jit_float64_atan2","",""],[5,"jit_float64_ceil","",""],[5,"jit_float64_cos","",""],[5,"jit_float64_cosh","",""],[5,"jit_float64_exp","",""],[5,"jit_float64_floor","",""],[5,"jit_float64_log","",""],[5,"jit_float64_log10","",""],[5,"jit_float64_pow","",""],[5,"jit_float64_rint","",""],[5,"jit_float64_round","",""],[5,"jit_float64_sin","",""],[5,"jit_float64_sinh","",""],[5,"jit_float64_sqrt","",""],[5,"jit_float64_tan","",""],[5,"jit_float64_tanh","",""],[5,"jit_float64_trunc","",""],[5,"jit_float64_is_finite","",""],[5,"jit_float64_is_nan","",""],[5,"jit_float64_is_inf","",""],[5,"jit_float64_abs","",""],[5,"jit_float64_min","",""],[5,"jit_float64_max","",""],[5,"jit_float64_sign","",""],[5,"jit_nfloat_add","",""],[5,"jit_nfloat_sub","",""],[5,"jit_nfloat_mul","",""],[5,"jit_nfloat_div","",""],[5,"jit_nfloat_rem","",""],[5,"jit_nfloat_ieee_rem","",""],[5,"jit_nfloat_neg","",""],[5,"jit_nfloat_eq","",""],[5,"jit_nfloat_ne","",""],[5,"jit_nfloat_lt","",""],[5,"jit_nfloat_le","",""],[5,"jit_nfloat_gt","",""],[5,"jit_nfloat_ge","",""],[5,"jit_nfloat_cmpl","",""],[5,"jit_nfloat_cmpg","",""],[5,"jit_nfloat_acos","",""],[5,"jit_nfloat_asin","",""],[5,"jit_nfloat_atan","",""],[5,"jit_nfloat_atan2","",""],[5,"jit_nfloat_ceil","",""],[5,"jit_nfloat_cos","",""],[5,"jit_nfloat_cosh","",""],[5,"jit_nfloat_exp","",""],[5,"jit_nfloat_floor","",""],[5,"jit_nfloat_log","",""],[5,"jit_nfloat_log10","",""],[5,"jit_nfloat_pow","",""],[5,"jit_nfloat_rint","",""],[5,"jit_nfloat_round","",""],[5,"jit_nfloat_sin","",""],[5,"jit_nfloat_sinh","",""],[5,"jit_nfloat_sqrt","",""],[5,"jit_nfloat_tan","",""],[5,"jit_nfloat_tanh","",""],[5,"jit_nfloat_trunc","",""],[5,"jit_nfloat_is_finite","",""],[5,"jit_nfloat_is_nan","",""],[5,"jit_nfloat_is_inf","",""],[5,"jit_nfloat_abs","",""],[5,"jit_nfloat_min","",""],[5,"jit_nfloat_max","",""],[5,"jit_nfloat_sign","",""],[5,"jit_int_to_sbyte","",""],[5,"jit_int_to_ubyte","",""],[5,"jit_int_to_short","",""],[5,"jit_int_to_ushort","",""],[5,"jit_int_to_int","",""],[5,"jit_int_to_uint","",""],[5,"jit_int_to_long","",""],[5,"jit_int_to_ulong","",""],[5,"jit_uint_to_int","",""],[5,"jit_uint_to_uint","",""],[5,"jit_uint_to_long","",""],[5,"jit_uint_to_ulong","",""],[5,"jit_long_to_int","",""],[5,"jit_long_to_uint","",""],[5,"jit_long_to_long","",""],[5,"jit_long_to_ulong","",""],[5,"jit_ulong_to_int","",""],[5,"jit_ulong_to_uint","",""],[5,"jit_ulong_to_long","",""],[5,"jit_ulong_to_ulong","",""],[5,"jit_int_to_sbyte_ovf","",""],[5,"jit_int_to_ubyte_ovf","",""],[5,"jit_int_to_short_ovf","",""],[5,"jit_int_to_ushort_ovf","",""],[5,"jit_int_to_int_ovf","",""],[5,"jit_int_to_uint_ovf","",""],[5,"jit_int_to_long_ovf","",""],[5,"jit_int_to_ulong_ovf","",""],[5,"jit_uint_to_int_ovf","",""],[5,"jit_uint_to_uint_ovf","",""],[5,"jit_uint_to_long_ovf","",""],[5,"jit_uint_to_ulong_ovf","",""],[5,"jit_long_to_int_ovf","",""],[5,"jit_long_to_uint_ovf","",""],[5,"jit_long_to_long_ovf","",""],[5,"jit_long_to_ulong_ovf","",""],[5,"jit_ulong_to_int_ovf","",""],[5,"jit_ulong_to_uint_ovf","",""],[5,"jit_ulong_to_long_ovf","",""],[5,"jit_ulong_to_ulong_ovf","",""],[5,"jit_float32_to_int","",""],[5,"jit_float32_to_uint","",""],[5,"jit_float32_to_long","",""],[5,"jit_float32_to_ulong","",""],[5,"jit_float32_to_int_ovf","",""],[5,"jit_float32_to_uint_ovf","",""],[5,"jit_float32_to_long_ovf","",""],[5,"jit_float32_to_ulong_ovf","",""],[5,"jit_float64_to_int","",""],[5,"jit_float64_to_uint","",""],[5,"jit_float64_to_long","",""],[5,"jit_float64_to_ulong","",""],[5,"jit_float64_to_int_ovf","",""],[5,"jit_float64_to_uint_ovf","",""],[5,"jit_float64_to_long_ovf","",""],[5,"jit_float64_to_ulong_ovf","",""],[5,"jit_nfloat_to_int","",""],[5,"jit_nfloat_to_uint","",""],[5,"jit_nfloat_to_long","",""],[5,"jit_nfloat_to_ulong","",""],[5,"jit_nfloat_to_int_ovf","",""],[5,"jit_nfloat_to_uint_ovf","",""],[5,"jit_nfloat_to_long_ovf","",""],[5,"jit_nfloat_to_ulong_ovf","",""],[5,"jit_int_to_float32","",""],[5,"jit_int_to_float64","",""],[5,"jit_int_to_nfloat","",""],[5,"jit_uint_to_float32","",""],[5,"jit_uint_to_float64","",""],[5,"jit_uint_to_nfloat","",""],[5,"jit_long_to_float32","",""],[5,"jit_long_to_float64","",""],[5,"jit_long_to_nfloat","",""],[5,"jit_ulong_to_float32","",""],[5,"jit_ulong_to_float64","",""],[5,"jit_ulong_to_nfloat","",""],[5,"jit_float32_to_float64","",""],[5,"jit_float32_to_nfloat","",""],[5,"jit_float64_to_float32","",""],[5,"jit_float64_to_nfloat","",""],[5,"jit_nfloat_to_float32","",""],[5,"jit_nfloat_to_float64","",""],[5,"jit_meta_set","",""],[5,"jit_meta_get","",""],[5,"jit_meta_free","",""],[5,"jit_meta_destroy","",""],[5,"jitom_destroy_model","",""],[5,"jitom_get_class_by_name","",""],[5,"jitom_class_get_name","",""],[5,"jitom_class_get_modifiers","",""],[5,"jitom_class_get_type","",""],[5,"jitom_class_get_value_type","",""],[5,"jitom_class_get_primary_super","",""],[5,"jitom_class_get_all_supers","",""],[5,"jitom_class_get_interfaces","",""],[5,"jitom_class_get_fields","",""],[5,"jitom_class_get_methods","",""],[5,"jitom_class_new","",""],[5,"jitom_class_new_value","",""],[5,"jitom_class_delete","",""],[5,"jitom_class_add_ref","",""],[5,"jitom_field_get_name","",""],[5,"jitom_field_get_type","",""],[5,"jitom_field_get_modifiers","",""],[5,"jitom_field_load","",""],[5,"jitom_field_load_address","",""],[5,"jitom_field_store","",""],[5,"jitom_method_get_name","",""],[5,"jitom_method_get_type","",""],[5,"jitom_method_get_modifiers","",""],[5,"jitom_method_invoke","",""],[5,"jitom_method_invoke_virtual","",""],[5,"jitom_type_tag_as_class","",""],[5,"jitom_type_tag_as_value","",""],[5,"jitom_type_is_class","",""],[5,"jitom_type_is_value","",""],[5,"jitom_type_get_model","",""],[5,"jitom_type_get_class","",""],[5,"jit_unwind_init","",""],[5,"jit_unwind_free","",""],[5,"jit_unwind_next","",""],[5,"jit_unwind_next_pc","",""],[5,"jit_unwind_get_pc","",""],[5,"jit_unwind_jump","",""],[5,"jit_unwind_get_function","",""],[5,"jit_unwind_get_offset","",""],[5,"jit_malloc","",""],[5,"jit_calloc","",""],[5,"jit_realloc","",""],[5,"jit_free","",""],[5,"jit_memset","",""],[5,"jit_memcpy","",""],[5,"jit_memmove","",""],[5,"jit_memcmp","",""],[5,"jit_memchr","",""],[5,"jit_strlen","",""],[5,"jit_strcpy","",""],[5,"jit_strcat","",""],[5,"jit_strncpy","",""],[5,"jit_strdup","",""],[5,"jit_strndup","",""],[5,"jit_strcmp","",""],[5,"jit_strncmp","",""],[5,"jit_stricmp","",""],[5,"jit_strnicmp","",""],[5,"jit_strchr","",""],[5,"jit_strrchr","",""],[5,"jit_value_create","",""],[5,"jit_value_create_nint_constant","",""],[5,"jit_value_create_long_constant","",""],[5,"jit_value_create_float32_constant","",""],[5,"jit_value_create_float64_constant","",""],[5,"jit_value_create_nfloat_constant","",""],[5,"jit_value_create_constant","",""],[5,"jit_value_get_param","",""],[5,"jit_value_get_struct_pointer","",""],[5,"jit_value_is_temporary","",""],[5,"jit_value_is_local","",""],[5,"jit_value_is_constant","",""],[5,"jit_value_is_parameter","",""],[5,"jit_value_ref","",""],[5,"jit_value_set_volatile","",""],[5,"jit_value_is_volatile","",""],[5,"jit_value_set_addressable","",""],[5,"jit_value_is_addressable","",""],[5,"jit_value_get_type","",""],[5,"jit_value_get_function","",""],[5,"jit_value_get_block","",""],[5,"jit_value_get_context","",""],[5,"jit_value_get_constant","",""],[5,"jit_value_get_nint_constant","",""],[5,"jit_value_get_long_constant","",""],[5,"jit_value_get_float32_constant","",""],[5,"jit_value_get_float64_constant","",""],[5,"jit_value_get_nfloat_constant","",""],[5,"jit_value_is_true","",""],[5,"jit_constant_convert","",""],[5,"jit_vmem_init","",""],[5,"jit_vmem_page_size","",""],[5,"jit_vmem_round_up","",""],[5,"jit_vmem_round_down","",""],[5,"jit_vmem_reserve","",""],[5,"jit_vmem_reserve_committed","",""],[5,"jit_vmem_release","",""],[5,"jit_vmem_commit","",""],[5,"jit_vmem_decommit","",""],[5,"jit_vmem_protect","",""],[5,"_jit_get_frame_address","",""],[5,"_jit_get_next_frame_address","",""],[5,"_jit_get_return_address","",""],[5,"jit_frame_contains_crawl_mark","",""],[5,"jit_dump_type","",""],[5,"jit_dump_value","",""],[5,"jit_dump_insn","",""],[5,"jit_dump_function","",""],[6,"jit_sbyte","",""],[6,"jit_ubyte","",""],[6,"jit_short","",""],[6,"jit_ushort","",""],[6,"jit_int","",""],[6,"jit_uint","",""],[6,"jit_nint","",""],[6,"jit_nuint","",""],[6,"jit_long","",""],[6,"jit_ulong","",""],[6,"jit_float32","",""],[6,"jit_float64","",""],[6,"jit_nfloat","",""],[6,"jit_ptr","",""],[6,"Struct__jit_context","",""],[6,"jit_context_t","",""],[6,"Struct__jit_function","",""],[6,"jit_function_t","",""],[6,"Struct__jit_block","",""],[6,"jit_block_t","",""],[6,"Struct__jit_insn","",""],[6,"jit_insn_t","",""],[6,"Struct__jit_value","",""],[6,"jit_value_t","",""],[6,"Struct__jit_type","",""],[6,"jit_type_t","",""],[6,"Struct_jit_stack_trace","",""],[6,"jit_stack_trace_t","",""],[6,"jit_label_t","",""],[6,"jit_meta_free_func","",""],[6,"jit_on_demand_func","",""],[6,"jit_on_demand_driver_func","",""],[6,"jit_size_t","",""],[6,"jit_memory_context_t","",""],[6,"jit_function_info_t","",""],[6,"jit_memory_manager_t","",""],[6,"jit_abi_t","",""],[6,"jit_closure_func","",""],[6,"Struct_jit_closure_va_list","",""],[6,"jit_closure_va_list_t","",""],[6,"Struct_jit_debugger","",""],[6,"jit_debugger_t","",""],[6,"jit_debugger_thread_id_t","",""],[6,"jit_debugger_breakpoint_id_t","",""],[6,"jit_debugger_event_t","",""],[6,"jit_debugger_breakpoint_info_t","",""],[6,"jit_debugger_hook_func","",""],[6,"Struct_jit_readelf","",""],[6,"jit_readelf_t","",""],[6,"Struct_jit_writeelf","",""],[6,"jit_writeelf_t","",""],[6,"jit_exception_func","",""],[6,"Struct__jit_meta","",""],[6,"jit_meta_t","",""],[6,"Struct_jit_objmodel","",""],[6,"jit_objmodel_t","",""],[6,"Struct_jitom_class","",""],[6,"jitom_class_t","",""],[6,"Struct_jitom_field","",""],[6,"jitom_field_t","",""],[6,"Struct_jitom_method","",""],[6,"jitom_method_t","",""],[6,"jit_opcode_info_t","",""],[6,"_jit_arch_frame_t","",""],[6,"jit_prot_t","",""],[7,"jit_abi_cdecl","",""],[7,"jit_abi_vararg","",""],[7,"jit_abi_stdcall","",""],[7,"jit_abi_fastcall","",""],[7,"JIT_PROT_NONE","",""],[7,"JIT_PROT_READ","",""],[7,"JIT_PROT_READ_WRITE","",""],[7,"JIT_PROT_EXEC_READ","",""],[7,"JIT_PROT_EXEC_READ_WRITE","",""],[11,"eq","","",4],[11,"ne","","",4],[11,"ptr_value","","",8],[11,"int_value","","",8],[11,"uint_value","","",8],[11,"nint_value","","",8],[11,"nuint_value","","",8],[11,"long_value","","",8],[11,"ulong_value","","",8],[11,"float32_value","","",8],[11,"float64_value","","",8],[11,"nfloat_value","","",8]],"paths":[[3,"Struct_jit_memory_manager"],[3,"Struct_jit_debugger_event"],[3,"Struct_jit_debugger_breakpoint_info"],[3,"jit_intrinsic_descr_t"],[3,"jit_insn_iter_t"],[3,"Struct_jit_opcode_info"],[3,"Struct__jit_arch_frame"],[3,"jit_unwind_context_t"],[3,"Union_Unnamed1"],[3,"jit_constant_t"],[3,"jit_crawl_mark_t"]]};

searchIndex['jit_macros'] = {"items":[[0,"","jit_macros",""],[5,"plugin_registrar","",""],[14,"jit_struct!","","Construct a JIT struct with the fields given"],[14,"jit_union!","","Construct a JIT union with the fields given"],[14,"jit_fn!","","Construct a JIT function signature with the arguments and return type given"],[14,"jit!","",""],[14,"jit_func!","",""]],"paths":[]};

searchIndex['pkg-config'] = {"items":[[0,"","pkg-config",""],[3,"Options","",""],[12,"statik","","",0],[12,"atleast_version","","",0],[5,"target_supported","",""],[5,"find_library","",""],[5,"find_library_opts","",""],[5,"default_options","",""]],"paths":[[3,"Options"]]};

initSearch(searchIndex);
